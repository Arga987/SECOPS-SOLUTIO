import { useState } from "react";

import "./App.css";
import { Table } from "./components/Table";
import { Modal } from "./components/Modal";

function App() {
  const [modalOpen, setModalOpen] = useState(false);
  const [rows, setRows] = useState([
    {
      cveId: "CVE-2021-32628",
      severity: "HIGH",
      cvss: "7.5",
      affectedPackages: "redis-server, redis-tools",
      cweId: "CWE-190",
    },
    {
      cveId: "CVE-2016-1585",
      severity: "CRITICAL",
      cvss: "9.8",
      affectedPackages: "apparmor, libapparmor1",
      cweId: "CWE-254",
    },
    {
      cveId: "CVE-2021-20308",
      severity: "CRITICAL",
      cvss: "9.8",
      affectedPackages: "htmldoc, htmldoc-common",
      cweId: "CWE-190",
    },
    {
      cveId: "CVE-2021-4048",
      severity: "CRITICAL",
      cvss: "9.1",
      affectedPackages: "libblas3",
      cweId: "CWE-125",
    },
    {
      cveId: "CVE-2022-36227",
      severity: "CRITICAL",
      cvss: "9.8",
      affectedPackages: "libarchive13",
      cweId: "CWE-476",
    },
    {
      cveId: "CVE-2021-3697",
      severity: "HIGH",
      cvss: "7",
      affectedPackages: "grub-common, grub-pc, grub-pc-bin, grub2-common",
      cweId: "CWE-787",
    },
    {
      cveId: "CVE-2021-38091",
      severity: "HIGH",
      cvss: "8.8",
      affectedPackages: "libavcodec58, libavutil56, libswresample3",
      cweId: "CWE-190",
    },
    {
      cveId: "CVE-2016-2781",
      severity: "MEDIUM",
      cvss: "6.5",
      affectedPackages: "coreutils",
      cweId: "CWE-20",
    },
    {
      cveId: "CVE-2016-9802",
      severity: "MEDIUM",
      cvss: "5.3",
      affectedPackages: "bluez, libbluetooth3",
      cweId: "CWE-119",
    },
    {
      cveId: "CVE-2019-1563",
      severity: "LOW",
      cvss: "3.7",
      affectedPackages: "libnode72",
      cweId: "CWE-327",
    },
  ]);
  const [rowToEdit, setRowToEdit] = useState(null);

  const handleDeleteRow = (targetIndex) => {
    setRows(rows.filter((_, idx) => idx !== targetIndex));
  };

  const handleEditRow = (idx) => {
    setRowToEdit(idx);

    setModalOpen(true);
  };

  const handleSubmit = (newRow) => {
    rowToEdit === null
      ? setRows([...rows, newRow])
      : setRows(
          rows.map((currRow, idx) => {
            if (idx !== rowToEdit) return currRow;

            return newRow;
          })
        );
  };

  return (
    <div className="App">
      <h1>CVE DATABASE</h1>
      <Table rows={rows} deleteRow={handleDeleteRow} editRow={handleEditRow} />
      <button onClick={() => setModalOpen(true)} className="btn">
        Add
      </button>
      {modalOpen && (
        <Modal
          closeModal={() => {
            setModalOpen(false);
            setRowToEdit(null);
          }}
          onSubmit={handleSubmit}
          defaultValue={rowToEdit !== null && rows[rowToEdit]}
        />
      )}
    </div>
  );
}

export default App;